{"version":3,"sources":["components/calendar.js","components/progress.js","components/display.js","App.js","serviceWorker.js","index.js"],"names":["GenerateDay","d","Date","getDay","getDate","getMonth","getFullYear","ProgressBar","props","useEffect","total","cases","recovered","recoveredCases","dead","deadCases","recoveredBar","document","querySelector","deadBar","style","width","parseInt","progress","className","align","id","Display","useState","setCase","newCases","setNew","setDead","setRecover","activeCases","setActive","a","fetch","response","json","data","todayCases","deaths","active","getData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAoBeA,MAlBf,WAEE,IAAIC,EAAI,IAAIC,KAWZ,OAAQ,6BACN,4BAXY,CACZ,qBACA,eACA,cACA,mBACA,oBACA,kBACA,qBAIWD,EAAEE,UAAb,YAA8BF,EAAEG,UAAhC,aAAkDH,EAAEI,WAAa,EAAjE,aAAyEJ,EAAEK,iB,8BCmBhEC,MAjCf,SAAqBC,GAkBjB,OAJAC,qBAAU,YAZV,WAEI,IAAMC,EAAQF,EAAMG,MACdC,EAAYJ,EAAMK,eAClBC,EAAON,EAAMO,UACbC,EAAeC,SAASC,cAAc,YACtCC,EAAUF,SAASC,cAAc,SAEvCF,EAAaI,MAAMC,MAAQC,SAASV,EAAYF,EAAQ,KAAO,IAC/DS,EAAQC,MAAMC,MAAQC,SAASR,EAAOJ,EAAQ,KAAO,IAIrDa,MAIA,6BACI,yBAAKC,UAAU,MAAMC,MAAM,QACvB,0BAAMC,GAAG,WAAWF,UAAU,YAC9B,0BAAME,GAAG,WAAWF,UAAU,UAElC,yBAAKA,UAAU,OAAOC,MAAM,UACxB,2BAAG,uBAAGD,UAAU,cAAhB,sBACA,2BAAG,uBAAGA,UAAU,aAAhB,gBACA,2BAAG,uBAAGA,UAAU,eAAhB,wCCsBDG,MA/Cf,WAAoB,IAAD,EAEQC,mBAAS,yBAFjB,mBAEVjB,EAFU,KAEHkB,EAFG,OAGUD,mBAAS,yBAHnB,mBAGVE,EAHU,KAGAC,EAHA,OAIYH,mBAAS,yBAJrB,mBAIVb,EAJU,KAICiB,EAJD,OAKoBJ,mBAAS,yBAL7B,mBAKVf,EALU,KAKMoB,EALN,OAMgBL,mBAAS,yBANzB,mBAMVM,EANU,KAMGC,EANH,iDAYjB,8BAAAC,EAAA,4DAEY,6DAFZ,SAGuBC,MADX,8DAFZ,cAGMC,EAHN,gBAImBA,EAASC,OAJ5B,OAIMC,EAJN,OAMEX,EAAQW,EAAK7B,OACboB,EAAOS,EAAKC,YACZT,EAAQQ,EAAKE,QACbT,EAAWO,EAAK5B,WAChBuB,EAAUK,EAAKG,QAVjB,6CAZiB,sBAyBjB,OAjBAlC,qBAAU,YARO,mCASfmC,KACC,IAgBC,yBAAKpB,UAAU,QACb,kBAAC,EAAD,CACEb,MAAOA,EACPuB,YAAaA,EACbnB,UAAWA,EACXF,eAAgBA,IAClB,yBAAKW,UAAU,WACX,oDAAgBb,GAChB,oDAAgBmB,GAChB,+CAAgBf,GAChB,qDAAiBF,GACjB,oEAAsBqB,IAE1B,wEACAJ,EAAW,iDAAoC,iDC7BxCe,MAXf,WAEE,OACE,yBAAKrB,UAAU,MAAMC,MAAM,UACzB,qEACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bfe0dbbb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction GenerateDay() {\r\n    \r\n  let d = new Date();\r\n  const dates = [\r\n    'Chủ Nhật',\r\n    'Thứ Hai',\r\n    'Thứ Ba',\r\n    'Thứ Tư',\r\n    'Thứ Năm',\r\n    'Thứ Sáu',\r\n    'Thứ Bảy'\r\n  ];\r\n\r\n  return (<div>\r\n    <h4>{dates[d.getDay()]} ngày {d.getDate()} tháng {d.getMonth() + 1} năm {d.getFullYear()}</h4>\r\n  </div>);\r\n}\r\n\r\nexport default GenerateDay;\r\n","import React, { useEffect } from 'react';\r\n\r\nfunction ProgressBar(props) {\r\n\r\n    function progress() {\r\n\r\n        const total = props.cases;\r\n        const recovered = props.recoveredCases;\r\n        const dead = props.deadCases;\r\n        const recoveredBar = document.querySelector('.recover');\r\n        const deadBar = document.querySelector('.dead');\r\n\r\n        recoveredBar.style.width = parseInt(recovered / total * 100) + '%';\r\n        deadBar.style.width = parseInt(dead / total * 100) + '%';\r\n    }\r\n\r\n    useEffect(() => {\r\n        progress();\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"bar\" align=\"left\">\r\n                <span id=\"progress\" className=\"recover\"></span>\r\n                <span id=\"progress\" className=\"dead\"></span>\r\n            </div>\r\n            <div className=\"info\" align=\"center\">\r\n                <p><i className=\"icon blue\"></i>Hồi phục</p>\r\n                <p><i className=\"icon red\"></i>Tử vong</p>\r\n                <p><i className=\"icon white\"></i>Đang điều trị</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState, useEffect } from 'react';\r\nimport ProgressBar from './progress';\r\n\r\n\r\nfunction Display() {  \r\n    \r\n  const [cases, setCase] = useState('Đang lấy...');\r\n  const [newCases, setNew] = useState('Đang lấy...');\r\n  const [deadCases, setDead] = useState('Đang lấy...');\r\n  const [recoveredCases, setRecover] = useState('Đang lấy...');\r\n  const [activeCases, setActive] = useState('Đang lấy...');\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  async function getData() {\r\n    \r\n    let url = 'https://coronavirus-19-api.herokuapp.com/countries/vietnam';\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n\r\n    setCase(data.cases);\r\n    setNew(data.todayCases);\r\n    setDead(data.deaths);\r\n    setRecover(data.recovered);\r\n    setActive(data.active);\r\n  }\r\n\r\n  return (\r\n      <div className=\"show\">\r\n        <ProgressBar \r\n          cases={cases}\r\n          activeCases={activeCases}\r\n          deadCases={deadCases}\r\n          recoveredCases={recoveredCases}  />\r\n        <div className=\"display\">\r\n            <p>Tổng số ca: {cases}</p>\r\n            <p>Ca mắc mới: {newCases}</p>\r\n            <p>Ca tử vong: {deadCases}</p>\r\n            <p>Ca hồi phục: {recoveredCases}</p>\r\n            <p>Ca đang điều trị: {activeCases}</p>\r\n        </div>\r\n        <p>Tin tức: Trong 24h qua Việt Nam {\r\n        newCases ? 'ghi nhận ${newCases} ca mắc mới' : 'không ghi nhận ca mắc mới'\r\n        }\r\n        </p>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React from 'react';\nimport GenerateDay from './components/calendar';\nimport Display from './components/display';\n\nfunction App() {  \n\n  return (\n    <div className=\"app\" align=\"center\">\n      <h1>Bạn đang xem: Việt Nam</h1>\n      <GenerateDay />\n      <Display />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}